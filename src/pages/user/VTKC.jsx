import React, { useEffect, useMemo, useRef, useState } from "react";

// ‚úÖ Single-file React component using Bootstrap 5 utility classes
// How to use:
// 1) Include Bootstrap 5 CSS & JS in index.html (CDN):
//    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
//    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
// 2) (Optional) Bootstrap Icons:
//    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />
// 3) Host a local image at /cake.jpg (or keep the fallback), then render <BirthdayKimChi />
import mp3 from '../../assets/user/Happy Birthday To You.mp3'
export default function BirthdayKimChi() {
    // THEME & UI
    const [theme, setTheme] = useState("sunrise"); // sunrise | aurora | candy | royal | ocean | sunset
    const [accent, setAccent] = useState("#ff4d6d");
    const [showConfetti, setShowConfetti] = useState(true);

    // MESSAGE
    const [signature, setSignature] = useState("Gia ƒë√¨nh & B·∫°n b√®");
    const [wish, setWish] = useState("");

    // MUSIC
    const audioRef = useRef(null);
    const [isPlaying, setIsPlaying] = useState(false);
    const [track, setTrack] = useState(mp3); // Royalty-free

    // EXPORT
    const cardRef = useRef(null);

    // PRESET WISHES
    const wishes = useMemo(
        () => [
            "Ch√∫c Chi lu√¥n r·∫°ng r·ª° nh∆∞ √°nh m·∫∑t tr·ªùi, g·∫∑p nhi·ªÅu ƒëi·ªÅu may m·∫Øn v√† y√™u th∆∞∆°ng ng·∫≠p tr√†n!",
            "Tu·ªïi m·ªõi th·∫≠t nhi·ªÅu s·ª©c kh·ªèe, th√™m v·∫°n ni·ªÅm vui, v√† t·∫•t c·∫£ d·ª± ƒë·ªãnh ƒë·ªÅu th√†nh c√¥ng ngo√†i mong ƒë·ª£i!",
            "Ch√∫c Chi m·ªôt nƒÉm ƒë·∫ßy c·∫£m h·ª©ng: l√†m vi·ªác hƒÉng say ‚Äì s·ªëng th·∫≠t ch·∫•t ‚Äì h·∫°nh ph√∫c m·ªói ng√†y!",
            "Mong m·ªçi ƒëi·ªÅu an l√†nh, b√¨nh y√™n v√† n·ªü r·ªô nh·ªØng c∆° h·ªôi tuy·ªát v·ªùi ·ªü ph√≠a tr∆∞·ªõc!",
            "Ch√∫c Chi c√†ng ng√†y c√†ng xinh ƒë·∫πp, t·ª± tin, t·ªèa s√°ng v√† lu√¥n l√† phi√™n b·∫£n tuy·ªát nh·∫•t c·ªßa ch√≠nh m√¨nh!",
        ],
        []
    );

    // pick a random wish on first load
    useEffect(() => {
        setWish(wishes[Math.floor(Math.random() * wishes.length)]);
    }, [wishes]);

    // bind accent color variable
    useEffect(() => {
        document.documentElement.style.setProperty("--accent", accent);
    }, [accent]);

    // THEME switcher
    const themes = [
        { key: "sunrise", label: "Sunrise" },
        { key: "aurora", label: "Aurora" },
        { key: "candy", label: "Candy" },
        { key: "royal", label: "Royal" },
        { key: "ocean", label: "Ocean" },
        { key: "sunset", label: "Sunset" },
    ];
    const switchTheme = () => {
        const order = themes.map((t) => t.key);
        const idx = order.indexOf(theme);
        setTheme(order[(idx + 1) % order.length]);
    };

    // SHARE
    const shareWish = async () => {
        const url = window.location.href;
        const text = `üéÇ Ch√∫c m·ª´ng sinh nh·∫≠t V≈© Th·ªã Kim Chi!

${wish}
‚Äî ${signature}`;
        if (navigator.share) {
            try { await navigator.share({ title: "Happy Birthday Kim Chi", text, url }); return; } catch (_) { }
        }
        await navigator.clipboard.writeText(`${text}
${url}`);
        alert("ƒê√£ sao ch√©p l·ªùi ch√∫c & link v√†o clipboard! ‚ú®");
    };

    const shareToFacebook = () => {
        const url = encodeURIComponent(window.location.href);
        const quote = encodeURIComponent(`${wish} ‚Äî ${signature}`);
        window.open(`https://www.facebook.com/sharer/sharer.php?u=${url}&quote=${quote}`, "_blank", "noopener,noreferrer,width=600,height=600");
    };

    const shareToZalo = () => {
        const url = encodeURIComponent(window.location.href);
        const text = encodeURIComponent(`${wish} ‚Äî ${signature}`);
        // Simple web share link (Zalo app will handle on devices with Zalo installed)
        window.open(`https://zalo.me/share?url=${url}&text=${text}`, "_blank", "noopener,noreferrer,width=600,height=600");
    };

    // MUSIC controls


    const togglePlay = async () => {
        const el = audioRef.current;
        if (!el) return;
        try {
            if (isPlaying) {
                el.pause();
                setIsPlaying(false);
            } else {
                const Ctx = window.AudioContext || window.webkitAudioContext;
                if (Ctx) {
                    if (!window.__appAudioCtx) window.__appAudioCtx = new Ctx();
                    await window.__appAudioCtx.resume();
                }
                el.muted = false;
                if (el.volume === 0) el.volume = 1;
                if (el.readyState < 2) el.load();
                await el.play();
                setIsPlaying(true);
            }
        } catch (e) {
            console.warn('Play error', e);
            alert('Kh√¥ng ph√°t ƒë∆∞·ª£c nh·∫°c. H√£y th·ª≠ ch·ªçn b√†i kh√°c ho·∫∑c d√πng file n·ªôi b·ªô /music.mp3, v√† ki·ªÉm tra ch·∫ø ƒë·ªô im l·∫∑ng/√¢m l∆∞·ª£ng.');
        }
    };

    const onChangeTrack = (url) => {
        setTrack(url);
        const el = audioRef.current;
        if (!el) return;
        el.pause();
        el.src = url; // force swap
        setTimeout(async () => {
            try {
                const Ctx = window.AudioContext || window.webkitAudioContext;
                if (Ctx) {
                    if (!window.__appAudioCtx) window.__appAudioCtx = new Ctx();
                    await window.__appAudioCtx.resume();
                }
                el.muted = false;
                if (el.volume === 0) el.volume = 1;
                await el.play();
                setIsPlaying(true);
            } catch (err) {
                console.warn('Autoplay/load failed', err);
                setIsPlaying(false);
            }
        }, 150);
    };

    // EXPORT PNG using html-to-image (requires CORS-safe images or same-origin assets)
    const exportPNG = async () => {
        if (!cardRef.current) return;
        try {
            const { toPng } = await import("html-to-image");
            const dataUrl = await toPng(cardRef.current, {
                cacheBust: true,
                pixelRatio: 2,
                quality: 1,
                filter: (node) => !(node.tagName === 'AUDIO'),
            });
            const a = document.createElement("a");
            a.href = dataUrl;
            a.download = `HappyBirthday_VuThiKimChi_${Date.now()}.png`;
            document.body.appendChild(a);
            a.click();
            a.remove();
        } catch (err) {
            console.error("Export PNG error:", err);
            alert("Xu·∫•t PNG ch∆∞a th√†nh c√¥ng. Ki·ªÉm tra l·∫°i ngu·ªìn ·∫£nh (CORS) ho·∫∑c d√πng ·∫£nh n·ªôi b·ªô /cake.jpg r·ªìi th·ª≠ l·∫°i!");
        }
    };

    // CONFETTI pieces (static)
    const confettiPieces = useMemo(() => {
        const count = 120;
        return Array.from({ length: count }).map((_, i) => ({
            id: i,
            left: Math.random() * 100, // vw
            delay: Math.random() * 3, // s
            duration: 5 + Math.random() * 4, // s
            size: 6 + Math.random() * 8, // px
            rotate: Math.random() * 360,
        }));
    }, []);

    return (
        <div className={`min-vh-100 d-flex align-items-stretch ${theme}`}>
            <style>{styles}</style>

            {/* Decorative background shapes */}
            <div className="bg-glow" />
            <div className="bg-orb orb-1" />
            <div className="bg-orb orb-2" />
            <div className="bg-orb orb-3" />

            {/* Confetti */}
            {showConfetti && (
                <div className="confetti-wrap pointer-events-none">
                    {confettiPieces.map((p) => (
                        <span
                            key={p.id}
                            className="confetti"
                            style={{
                                left: `${p.left}vw`,
                                animationDelay: `${p.delay}s`,
                                animationDuration: `${p.duration}s`,
                                width: p.size,
                                height: p.size * 0.4,
                                transform: `rotate(${p.rotate}deg)`,
                            }}
                        />
                    ))}
                </div>
            )}

            <div className="container py-5 position-relative">
                {/* CONTROL BAR */}
                <div className="row justify-content-center mb-3">
                    <div className="col-12 col-lg-10">
                        <div className="d-flex flex-wrap gap-2 align-items-center justify-content-between bg-white bg-opacity-75 border rounded-4 p-3 shadow-sm">
                            <div className="d-flex flex-wrap gap-2 align-items-center">
                                <select className="form-select" style={{ maxWidth: 180 }} value={theme} onChange={(e) => setTheme(e.target.value)}>
                                    {themes.map((t) => (
                                        <option key={t.key} value={t.key}>{t.label}</option>
                                    ))}
                                </select>
                                <button className="btn btn-outline-dark" onClick={switchTheme}><i className="bi bi-palette me-1" />ƒê·ªïi theme</button>
                                <div className="d-flex align-items-center gap-2">
                                    <span className="small text-muted">Accent</span>
                                    <input type="color" className="form-control form-control-color" value={accent} onChange={(e) => setAccent(e.target.value)} title="Ch·ªçn m√†u nh·∫•n" />
                                </div>
                                <button className={`btn btn-${showConfetti ? "warning" : "success"}`} onClick={() => setShowConfetti((s) => !s)}>
                                    {showConfetti ? "T·∫Øt ph√°o gi·∫•y" : "B·∫≠t ph√°o gi·∫•y"}
                                </button>
                            </div>

                            <div className="d-flex flex-wrap gap-2 align-items-center w-100">
                                <div className="input-group" style={{ maxWidth: 300 }}>
                                    <span className="input-group-text"><i className="bi bi-music-note-beamed" /></span>
                                    <select className="form-select" value={track} onChange={(e) => onChangeTrack(e.target.value)}>
                                        <option value={track}>Happy Birthday ‚Äì Piano</option>
                                        <option value={track}>Happy Birthday ‚Äì Lite</option>
                                        <option value={track}>Celebration ‚Äì Beat</option>
                                    </select>
                                </div>
                                <button className={`btn ${isPlaying ? "btn-danger" : "btn-primary"}`} onClick={togglePlay}>
                                    {isPlaying ? <i className="bi bi-pause-fill me-1" /> : <i className="bi bi-play-fill me-1" />}
                                    {isPlaying ? "T·∫°m d·ª´ng nh·∫°c" : "Ph√°t nh·∫°c"}
                                </button>
                                <button className="btn btn-outline-primary" onClick={shareToFacebook}><i className="bi bi-facebook me-1" />Chia s·∫ª Facebook</button>
                                <button className="btn btn-outline-success" onClick={shareToZalo}><i className="bi bi-chat-dots me-1" />Chia s·∫ª Zalo</button>
                            </div>
                        </div>
                    </div>
                </div>

                {/* CARD */}
                <div className="row justify-content-center">
                    <div className="col-12 col-lg-10">
                        <div ref={cardRef} className="card shadow-lg border-0 overflow-hidden rounded-4 birthday-card">
                            <div className="position-relative">
                                {/* Hero */}
                                <div className="hero p-4 p-md-5 text-center text-light">
                                    <div className="display-6 fw-bold text-shadow lh-1">Ch√∫c m·ª´ng sinh nh·∫≠t</div>
                                    <h1 className="display-4 fw-black mb-3 text-shadow">V≈© Th·ªã Kim Chi</h1>
                                    <p className="lead mb-0 fw-bold text-shadow lh-1">Ng√†y h√¥m nay l√† c·ªßa Chi ‚Äî h√£y t·ªèa s√°ng, t·∫≠n h∆∞·ªüng v√† c∆∞·ªùi th·∫≠t nhi·ªÅu nh√©! ‚ú®</p>
                                </div>
                            </div>

                            {/* Content */}
                            <div className="card-body p-4 p-md-5">
                                <div className="row g-4 align-items-center">
                                    <div className="col-12 col-md-5">
                                        <div className="photo-frame ratio ratio-1x1 rounded-4 overflow-hidden shadow-sm">
                                            <img crossOrigin="anonymous" src="/cake.jpg" alt="Birthday Cake" className="object-fit-cover" onError={(e) => { e.currentTarget.src = 'https://picsum.photos/id/1062/1200/1200.jpg'; }} />
                                        </div>
                                    </div>

                                    <div className="col-12 col-md-7">
                                        <div className="p-3 p-md-4 rounded-4 bg-light-subtle border">
                                            <h2 className="h3 fw-bold mb-3">L·ªùi ch√∫c d√†nh cho Chi üéÅ</h2>
                                            <p className="fs-5 mb-4" style={{ lineHeight: 1.7 }}>{wish}</p>

                                            <div className="row g-2 align-items-center mb-3">
                                                <div className="col-auto"><label className="form-label fw-semibold mb-0">K√Ω t√™n:</label></div>
                                                <div className="col">
                                                    <input className="form-control form-control-lg" value={signature} onChange={(e) => setSignature(e.target.value)} placeholder="Ng∆∞·ªùi g·ª≠i" />
                                                </div>
                                            </div>

                                            <div className="d-flex flex-wrap gap-2">
                                                <button className="btn btn-primary btn-lg" onClick={shareWish}><i className="bi bi-send me-2" />Chia s·∫ª l·ªùi ch√∫c</button>
                                                <button className="btn btn-outline-primary btn-lg" onClick={() => setWish(wishes[Math.floor(Math.random() * wishes.length)])}><i className="bi bi-stars me-2" />ƒê·ªïi l·ªùi ch√∫c kh√°c</button>
                                                <button className={`btn btn-${showConfetti ? "warning" : "success"} btn-lg`} onClick={() => setShowConfetti((s) => !s)}>
                                                    {showConfetti ? "T·∫Øt ph√°o gi·∫•y" : "B·∫≠t ph√°o gi·∫•y"}
                                                </button>
                                            </div>
                                        </div>

                                        {/* chips */}
                                        <div className="mt-4 d-flex flex-wrap gap-2">
                                            {["S·ª©c kh·ªèe", "Ni·ªÅm vui", "Th√†nh c√¥ng", "An y√™n", "Y√™u th∆∞∆°ng"].map((chip) => (
                                                <span key={chip} className="badge rounded-pill bg-accent-soft border px-3 py-2">{chip}</span>
                                            ))}
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div className="card-footer bg-transparent border-0 text-center pb-4">
                                <small className="text-muted">Made with üíñ for Kim Chi ‚Äî {new Date().getFullYear()}</small>
                            </div>
                        </div>

                        {/* Hashtags */}
                        <div className="d-flex justify-content-center gap-2 mt-4">
                            {["#KimChiBirthday", "#HappyBirthday", "#WeLoveYou"].map((tag) => (
                                <a key={tag} href="#" className="btn btn-link link-light text-decoration-none" onClick={(e) => e.preventDefault()}>{tag}</a>
                            ))}
                        </div>
                    </div>
                </div>
            </div>

            {/* Hidden audio element */}
            <audio ref={audioRef} src={track} preload="auto" crossOrigin="anonymous" playsInline onError={() => alert('Kh√¥ng ph√°t ƒë∆∞·ª£c nh·∫°c. Th·ª≠ ch·ªçn b√†i kh√°c ho·∫∑c d√πng /music.mp3')} />
        </div>
    );
}

const styles = `
  :root { --accent: #ff4d6d; }

  /* ---------- THEME BACKGROUNDS ---------- */
  .sunrise { background: radial-gradient(1200px 800px at 10% 10%, #ffe6a7 0%, transparent 60%), linear-gradient(135deg, #ff9a9e 0%, #fad0c4 100%); }
  .aurora { background: radial-gradient(900px 650px at 85% 15%, rgba(120,255,214,.35) 0%, transparent 60%), linear-gradient(135deg, #0f2027 0%, #203a43 50%, #2c5364 100%); }
  .candy { background: radial-gradient(900px 650px at 10% 90%, rgba(255,255,255,.4) 0%, transparent 55%), linear-gradient(135deg, #f3e7e9 0%, #e3eeff 100%); }
  .royal { background: radial-gradient(45% 35% at 80% 20%, rgba(255,255,255,.2), transparent 60%), linear-gradient(135deg, #200122 0%, #6f0000 100%); }
  .ocean { background: radial-gradient(60% 40% at 20% 20%, rgba(255,255,255,.18), transparent 60%), linear-gradient(135deg, #1e3c72 0%, #2a5298 100%); }
  .sunset { background: radial-gradient(60% 40% at 50% 0%, rgba(255,255,255,.18), transparent 60%), linear-gradient(135deg, #f12711 0%, #f5af19 100%); }

  .bg-glow { position: fixed; inset: 0; pointer-events: none; background: radial-gradient(60% 40% at 50% 0%, rgba(255,255,255,.15), transparent 70%); }
  .bg-orb { position: fixed; width: 40vmin; height: 40vmin; border-radius: 50%; filter: blur(20px); opacity: .35; pointer-events: none; }
  .orb-1 { top: 8%; left: 6%; background: var(--accent); animation: float 10s ease-in-out infinite; }
  .orb-2 { bottom: 8%; right: 10%; background: #a18cd1; animation: float 12s ease-in-out infinite reverse; }
  .orb-3 { bottom: 15%; left: 40%; background: #6ef3d6; animation: float 14s ease-in-out infinite; }

  @keyframes float { 0%, 100% { transform: translateY(0) } 50% { transform: translateY(-12px) } }

  /* ---------- CARD / HERO ---------- */
  .birthday-card { backdrop-filter: blur(4px); background: rgba(255,255,255,.88); }
  .hero { background: linear-gradient(180deg, rgba(0,0,0,.35), rgba(0,0,0,.2)), url('https://images.unsplash.com/photo-1530103862676-de8c9debad1d?q=80&w=1600&auto=format&fit=crop') center/cover no-repeat; min-height: 280px; }
  .text-shadow { text-shadow: 0 6px 24px rgba(0,0,0,.35); }
  .fw-black { font-weight: 900; }

  .photo-frame img { transition: transform .6s ease; }
  .photo-frame:hover img { transform: scale(1.05) rotate(-.5deg); }

  /* ---------- RIBBON ---------- */
  .ribbon { position: absolute; top: 18px; left: -10px; z-index: 1; }
  .ribbon span { position: relative; display: inline-block; background: var(--accent); color: #fff; padding: .5rem 1.25rem; font-weight: 800; letter-spacing: .5px; border-radius: .5rem; box-shadow: 0 8px 20px color-mix(in oklab, var(--accent), black 35%); }
  .ribbon span::after { content: ""; position: absolute; left: 8px; bottom: -10px; border: 10px solid transparent; border-top-color: color-mix(in oklab, var(--accent), black 30%); filter: drop-shadow(0 2px 0 rgba(0,0,0,.15)); }

  /* ---------- BADGES ---------- */
  .bg-accent-soft { background: color-mix(in oklab, var(--accent), white 85%); color: color-mix(in oklab, var(--accent), black 15%); }

  /* ---------- CONFETTI ---------- */
  .confetti-wrap { position: fixed; inset: 0; overflow: hidden; }
  .confetti { position: absolute; top: -10vh; border-radius: 2px; background: linear-gradient(135deg, #ffffff, #ffffff); box-shadow: 0 0 0 1px rgba(0,0,0,.05) inset; animation-name: fall, sway; animation-timing-function: linear, ease-in-out; animation-iteration-count: infinite; }
  @keyframes fall { to { transform: translateY(110vh) rotate(720deg); } }
  @keyframes sway { 0%, 100% { margin-left: 0 } 50% { margin-left: 16px } }
`;
